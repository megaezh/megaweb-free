<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Киноконтент API
 *
 * API биржи описаний к фильмам и сериалам https://kinocontent.club
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'kinopoisk_id' => 'int',
'text' => 'string',
'text_length' => 'int',
'symbols_from' => 'int',
'symbols_to' => 'int',
'unique' => 'int',
'comment' => 'string',
'private_comment' => 'string',
'confirmed' => 'bool',
'express' => 'bool',
'archived' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'kinopoisk_id' => null,
'text' => null,
'text_length' => null,
'symbols_from' => null,
'symbols_to' => null,
'unique' => null,
'comment' => null,
'private_comment' => null,
'confirmed' => null,
'express' => null,
'archived' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'kinopoisk_id' => 'kinopoisk_id',
'text' => 'text',
'text_length' => 'text_length',
'symbols_from' => 'symbols_from',
'symbols_to' => 'symbols_to',
'unique' => 'unique',
'comment' => 'comment',
'private_comment' => 'private_comment',
'confirmed' => 'confirmed',
'express' => 'express',
'archived' => 'archived'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'kinopoisk_id' => 'setKinopoiskId',
'text' => 'setText',
'text_length' => 'setTextLength',
'symbols_from' => 'setSymbolsFrom',
'symbols_to' => 'setSymbolsTo',
'unique' => 'setUnique',
'comment' => 'setComment',
'private_comment' => 'setPrivateComment',
'confirmed' => 'setConfirmed',
'express' => 'setExpress',
'archived' => 'setArchived'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'kinopoisk_id' => 'getKinopoiskId',
'text' => 'getText',
'text_length' => 'getTextLength',
'symbols_from' => 'getSymbolsFrom',
'symbols_to' => 'getSymbolsTo',
'unique' => 'getUnique',
'comment' => 'getComment',
'private_comment' => 'getPrivateComment',
'confirmed' => 'getConfirmed',
'express' => 'getExpress',
'archived' => 'getArchived'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['kinopoisk_id'] = isset($data['kinopoisk_id']) ? $data['kinopoisk_id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['text_length'] = isset($data['text_length']) ? $data['text_length'] : null;
        $this->container['symbols_from'] = isset($data['symbols_from']) ? $data['symbols_from'] : null;
        $this->container['symbols_to'] = isset($data['symbols_to']) ? $data['symbols_to'] : null;
        $this->container['unique'] = isset($data['unique']) ? $data['unique'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['private_comment'] = isset($data['private_comment']) ? $data['private_comment'] : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : null;
        $this->container['express'] = isset($data['express']) ? $data['express'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kinopoisk_id
     *
     * @return int
     */
    public function getKinopoiskId()
    {
        return $this->container['kinopoisk_id'];
    }

    /**
     * Sets kinopoisk_id
     *
     * @param int $kinopoisk_id kinopoisk_id
     *
     * @return $this
     */
    public function setKinopoiskId($kinopoisk_id)
    {
        $this->container['kinopoisk_id'] = $kinopoisk_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets text_length
     *
     * @return int
     */
    public function getTextLength()
    {
        return $this->container['text_length'];
    }

    /**
     * Sets text_length
     *
     * @param int $text_length text_length
     *
     * @return $this
     */
    public function setTextLength($text_length)
    {
        $this->container['text_length'] = $text_length;

        return $this;
    }

    /**
     * Gets symbols_from
     *
     * @return int
     */
    public function getSymbolsFrom()
    {
        return $this->container['symbols_from'];
    }

    /**
     * Sets symbols_from
     *
     * @param int $symbols_from symbols_from
     *
     * @return $this
     */
    public function setSymbolsFrom($symbols_from)
    {
        $this->container['symbols_from'] = $symbols_from;

        return $this;
    }

    /**
     * Gets symbols_to
     *
     * @return int
     */
    public function getSymbolsTo()
    {
        return $this->container['symbols_to'];
    }

    /**
     * Sets symbols_to
     *
     * @param int $symbols_to symbols_to
     *
     * @return $this
     */
    public function setSymbolsTo($symbols_to)
    {
        $this->container['symbols_to'] = $symbols_to;

        return $this;
    }

    /**
     * Gets unique
     *
     * @return int
     */
    public function getUnique()
    {
        return $this->container['unique'];
    }

    /**
     * Sets unique
     *
     * @param int $unique unique
     *
     * @return $this
     */
    public function setUnique($unique)
    {
        $this->container['unique'] = $unique;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets private_comment
     *
     * @return string
     */
    public function getPrivateComment()
    {
        return $this->container['private_comment'];
    }

    /**
     * Sets private_comment
     *
     * @param string $private_comment private_comment
     *
     * @return $this
     */
    public function setPrivateComment($private_comment)
    {
        $this->container['private_comment'] = $private_comment;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool $confirmed confirmed
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets express
     *
     * @return bool
     */
    public function getExpress()
    {
        return $this->container['express'];
    }

    /**
     * Sets express
     *
     * @param bool $express express
     *
     * @return $this
     */
    public function setExpress($express)
    {
        $this->container['express'] = $express;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived archived
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
