# coding: utf-8

"""
    Киноконтент API

    REST API биржи описаний к фильмам и сериалам https://kinocontent.club  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login': 'str',
        'balance': 'float',
        'is_enough_balance': 'bool',
        'symbols_from': 'int',
        'symbols_to': 'int',
        'comment': 'str',
        'private_comment': 'str',
        'express': 'bool'
    }

    attribute_map = {
        'login': 'login',
        'balance': 'balance',
        'is_enough_balance': 'is_enough_balance',
        'symbols_from': 'symbols_from',
        'symbols_to': 'symbols_to',
        'comment': 'comment',
        'private_comment': 'private_comment',
        'express': 'express'
    }

    def __init__(self, login=None, balance=None, is_enough_balance=None, symbols_from=None, symbols_to=None, comment=None, private_comment=None, express=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._login = None
        self._balance = None
        self._is_enough_balance = None
        self._symbols_from = None
        self._symbols_to = None
        self._comment = None
        self._private_comment = None
        self._express = None
        self.discriminator = None
        if login is not None:
            self.login = login
        if balance is not None:
            self.balance = balance
        if is_enough_balance is not None:
            self.is_enough_balance = is_enough_balance
        if symbols_from is not None:
            self.symbols_from = symbols_from
        if symbols_to is not None:
            self.symbols_to = symbols_to
        if comment is not None:
            self.comment = comment
        if private_comment is not None:
            self.private_comment = private_comment
        if express is not None:
            self.express = express

    @property
    def login(self):
        """Gets the login of this InlineResponse2001.  # noqa: E501


        :return: The login of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this InlineResponse2001.


        :param login: The login of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def balance(self):
        """Gets the balance of this InlineResponse2001.  # noqa: E501


        :return: The balance of this InlineResponse2001.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this InlineResponse2001.


        :param balance: The balance of this InlineResponse2001.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def is_enough_balance(self):
        """Gets the is_enough_balance of this InlineResponse2001.  # noqa: E501

        Выполняются ли задания из очереди, или выполнение приостановлено из-за недостаточного баланса  # noqa: E501

        :return: The is_enough_balance of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._is_enough_balance

    @is_enough_balance.setter
    def is_enough_balance(self, is_enough_balance):
        """Sets the is_enough_balance of this InlineResponse2001.

        Выполняются ли задания из очереди, или выполнение приостановлено из-за недостаточного баланса  # noqa: E501

        :param is_enough_balance: The is_enough_balance of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._is_enough_balance = is_enough_balance

    @property
    def symbols_from(self):
        """Gets the symbols_from of this InlineResponse2001.  # noqa: E501


        :return: The symbols_from of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._symbols_from

    @symbols_from.setter
    def symbols_from(self, symbols_from):
        """Sets the symbols_from of this InlineResponse2001.


        :param symbols_from: The symbols_from of this InlineResponse2001.  # noqa: E501
        :type: int
        """

        self._symbols_from = symbols_from

    @property
    def symbols_to(self):
        """Gets the symbols_to of this InlineResponse2001.  # noqa: E501


        :return: The symbols_to of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._symbols_to

    @symbols_to.setter
    def symbols_to(self, symbols_to):
        """Sets the symbols_to of this InlineResponse2001.


        :param symbols_to: The symbols_to of this InlineResponse2001.  # noqa: E501
        :type: int
        """

        self._symbols_to = symbols_to

    @property
    def comment(self):
        """Gets the comment of this InlineResponse2001.  # noqa: E501


        :return: The comment of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse2001.


        :param comment: The comment of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def private_comment(self):
        """Gets the private_comment of this InlineResponse2001.  # noqa: E501


        :return: The private_comment of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._private_comment

    @private_comment.setter
    def private_comment(self, private_comment):
        """Sets the private_comment of this InlineResponse2001.


        :param private_comment: The private_comment of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._private_comment = private_comment

    @property
    def express(self):
        """Gets the express of this InlineResponse2001.  # noqa: E501


        :return: The express of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._express

    @express.setter
    def express(self, express):
        """Sets the express of this InlineResponse2001.


        :param express: The express of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._express = express

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
